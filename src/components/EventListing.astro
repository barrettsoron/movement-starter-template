---
import { Icon } from 'astro-icon/components'

export interface Props {
  title: string
  description: string
  startDate: Date
  endDate?: Date
  location: string
  virtual?: boolean
  registrationUrl?: string
  capacity?: number
  spotsRemaining?: number
}

const { 
  title, 
  description, 
  startDate, 
  endDate, 
  location, 
  virtual = false,
  registrationUrl,
  capacity,
  spotsRemaining
} = Astro.props

const formatDate = (date: Date) => {
  return new Intl.DateTimeFormat('en-CA', {
    weekday: 'long',
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: 'numeric',
    minute: '2-digit',
    timeZoneName: 'short'
  }).format(date)
}

const isSameDay = endDate && startDate.toDateString() === endDate.toDateString()
---

<article class="event-listing">
  <div class="event-date">
    <span class="day">{startDate.getDate()}</span>
    <span class="month">{startDate.toLocaleDateString('en-CA', { month: 'short' }).toUpperCase()}</span>
  </div>
  
  <div class="event-content">
    <h3 class="event-title">
      <a href={registrationUrl || '#'} class={!registrationUrl ? 'no-link' : ''}>
        {title}
      </a>
    </h3>
    
    <div class="event-meta">
      <span class="event-time">
        <Icon name="lucide:clock" />
        <time datetime={startDate.toISOString()}>
          {formatDate(startDate)}
        </time>
        {endDate && !isSameDay && (
          <>
            <span> to </span>
            <time datetime={endDate.toISOString()}>
              {formatDate(endDate)}
            </time>
          </>
        )}
        {endDate && isSameDay && (
          <>
            <span> - </span>
            <time datetime={endDate.toISOString()}>
              {endDate.toLocaleTimeString('en-CA', { hour: 'numeric', minute: '2-digit' })}
            </time>
          </>
        )}
      </span>
      
      <span class="event-location">
        <Icon name={virtual ? "lucide:video" : "lucide:map-pin"} />
        {location}
        {virtual && <span class="badge-virtual">Virtual</span>}
      </span>
      
      {capacity && (
        <span class="event-capacity">
          <Icon name="lucide:users" />
          {spotsRemaining !== undefined 
            ? `${spotsRemaining} spots remaining`
            : `${capacity} capacity`
          }
        </span>
      )}
    </div>
    
    <p class="event-description">{description}</p>
    
    {registrationUrl && (
      <a href={registrationUrl} class="btn-register" aria-label={`Register for ${title}`}>
        Register
        <Icon name="lucide:arrow-right" />
      </a>
    )}
  </div>
</article>

<style lang="scss">
  .event-listing {
    display: flex;
    gap: 1.5rem;
    padding: 1.5rem;
    border: 2px solid var(--border-color);
    border-radius: 0.5rem;
    margin-bottom: 1.5rem;
    background: var(--background);
    transition: box-shadow 0.2s ease;
    
    &:hover {
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    
    @media (max-width: 640px) {
      flex-direction: column;
      gap: 1rem;
    }
  }
  
  .event-date {
    flex-shrink: 0;
    width: 80px;
    text-align: center;
    border: 2px solid var(--primary-color, #2563eb);
    border-radius: 0.5rem;
    padding: 0.75rem 0;
    height: fit-content;
    
    .day {
      display: block;
      font-size: 2rem;
      font-weight: bold;
      line-height: 1;
      color: var(--primary-color, #2563eb);
    }
    
    .month {
      display: block;
      font-size: 0.875rem;
      font-weight: 600;
      margin-top: 0.25rem;
      color: var(--text-muted);
    }
  }
  
  .event-content {
    flex: 1;
  }
  
  .event-title {
    margin: 0 0 0.75rem;
    font-size: 1.5rem;
    line-height: 1.3;
    
    a {
      color: var(--heading-color);
      text-decoration: none;
      
      &:hover:not(.no-link) {
        text-decoration: underline;
      }
      
      &.no-link {
        cursor: default;
      }
    }
  }
  
  .event-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1.5rem;
    margin-bottom: 1rem;
    font-size: 0.875rem;
    color: var(--text-muted);
    
    > span {
      display: flex;
      align-items: center;
      gap: 0.375rem;
      
      :global(svg) {
        width: 16px;
        height: 16px;
      }
    }
  }
  
  .badge-virtual {
    display: inline-block;
    padding: 0.125rem 0.5rem;
    background: var(--primary-color, #2563eb);
    color: white;
    border-radius: 9999px;
    font-size: 0.75rem;
    font-weight: 600;
    margin-left: 0.25rem;
  }
  
  .event-description {
    margin: 0 0 1rem;
    color: var(--text-color);
    line-height: 1.6;
  }
  
  .btn-register {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.625rem 1.25rem;
    background: var(--primary-color, #2563eb);
    color: white;
    text-decoration: none;
    border-radius: 0.375rem;
    font-weight: 600;
    transition: all 0.2s ease;
    
    &:hover {
      background: var(--primary-color-dark, #1d4ed8);
      transform: translateX(2px);
    }
    
    &:focus {
      outline: 3px solid var(--primary-color, #2563eb);
      outline-offset: 2px;
    }
    
    :global(svg) {
      width: 18px;
      height: 18px;
      transition: transform 0.2s ease;
    }
    
    &:hover :global(svg) {
      transform: translateX(4px);
    }
  }
</style>