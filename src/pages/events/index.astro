---
import { getCollection } from 'astro:content'
import DefaultLayout from '../../layouts/DefaultLayout.astro'
import PageHeader from '../../components/PageHeader.astro'
import EventListing from '../../components/EventListing.astro'
import CallToAction from '../../components/CallToAction.astro'

const events = await getCollection('events')
const now = new Date()

// Separate upcoming and past events
const upcomingEvents = events
  .filter((event: any) => new Date(event.data.startDate) >= now)
  .sort((a: any, b: any) => 
    new Date(a.data.startDate).valueOf() - new Date(b.data.startDate).valueOf()
  )

const pastEvents = events
  .filter((event: any) => new Date(event.data.startDate) < now)
  .sort((a: any, b: any) => 
    new Date(b.data.startDate).valueOf() - new Date(a.data.startDate).valueOf()
  )
  .slice(0, 3) // Show only 3 most recent past events
---

<DefaultLayout
  title="Events"
  description="Join us at upcoming events and actions"
>
  <PageHeader>
    <h1>Events</h1>
    <p>Join our movement at upcoming events and actions</p>
  </PageHeader>

  <section class="container">
    {upcomingEvents.length > 0 ? (
      <>
        <h2 class="section-title">Upcoming Events</h2>
        <div class="events-list">
          {upcomingEvents.map((event: any) => (
            <EventListing
              title={event.data.title}
              description={event.data.description}
              startDate={event.data.startDate}
              endDate={event.data.endDate}
              location={event.data.location}
              virtual={event.data.virtual}
              registrationUrl={event.data.registrationUrl}
              capacity={event.data.capacity}
            />
          ))}
        </div>
      </>
    ) : (
      <div class="no-events">
        <h2>No Upcoming Events</h2>
        <p>Check back soon for new events, or join our newsletter to stay updated.</p>
      </div>
    )}

    {pastEvents.length > 0 && (
      <>
        <h2 class="section-title past-events-title">Recent Past Events</h2>
        <div class="events-list past-events">
          {pastEvents.map((event: any) => (
            <EventListing
              title={event.data.title}
              description={event.data.description}
              startDate={event.data.startDate}
              endDate={event.data.endDate}
              location={event.data.location}
              virtual={event.data.virtual}
              registrationUrl={event.data.registrationUrl}
              capacity={event.data.capacity}
            />
          ))}
        </div>
      </>
    )}
  </section>

  <section class="container">
    <CallToAction>
      <h2>Want to Host an Event?</h2>
      <p>
        We support community organizers in hosting local events and actions. 
        Get in touch to learn about resources and support available.
      </p>
      <a href="/contact" class="btn-primary">Contact Us</a>
    </CallToAction>
  </section>
</DefaultLayout>

<style lang="scss">
  .section-title {
    font-size: 2rem;
    margin: 3rem 0 2rem;
    color: var(--heading-color);
    
    &.past-events-title {
      margin-top: 4rem;
      padding-top: 2rem;
      border-top: 2px solid var(--border-color);
    }
  }

  .events-list {
    margin-bottom: 2rem;
    
    &.past-events {
      opacity: 0.8;
      
      :global(.event-listing) {
        background: var(--background-alt);
      }
    }
  }

  .no-events {
    text-align: center;
    padding: 4rem 2rem;
    background: var(--background-alt);
    border-radius: 0.5rem;
    margin: 3rem 0;
    
    h2 {
      margin: 0 0 1rem;
      color: var(--heading-color);
    }
    
    p {
      color: var(--text-muted);
      max-width: 500px;
      margin: 0 auto;
    }
  }

  .btn-primary {
    display: inline-block;
    padding: 0.75rem 2rem;
    background: var(--primary-color, #2563eb);
    color: white;
    text-decoration: none;
    border-radius: 0.375rem;
    font-weight: 600;
    transition: all 0.2s ease;
    margin-top: 1rem;
    
    &:hover {
      background: var(--primary-color-dark, #1d4ed8);
      transform: translateY(-2px);
    }
    
    &:focus {
      outline: 3px solid var(--primary-color, #2563eb);
      outline-offset: 2px;
    }
  }
</style>